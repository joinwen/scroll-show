'use strict';

/**
 * 获取 dom 属性
 */
const getStyle = (ele, attr) => {
  return document.defaultView.getComputedStyle(ele)[attr];
};

/**
 * 字符串转数字
 */
const toNumber = (str) => {
  return Number.parseInt(str);
};

/**
 * 获取 高度 + 内边距 + 边框
 */
const getHeightWithBorder = (ele) => {
  return ele.offsetHeight;
};

/**
 * 获取 高度 + 内边距 + 边框 + 外边距
 */
const getHeightWithMargin = (ele) => {
  let height = getHeightWithBorder(ele),
    mt = getStyle(ele, "margin-top"),
    mb = getStyle(ele, "margin-bottom");
  return height + toNumber(mt) + toNumber(mb);
};

/**
 * 获取元素的 pageY
 */
const pageY = (ele) => {
  let y = 0;
  while(ele.offsetParent) {
    y += ele.offsetTop;
    ele = ele.offsetParent;
  }
  return y;
};

/**
 * 获取 src 在 target 元素里的 clientY
 * @param target
 * @param src
 */
const clientY = (target, src) => {
  let srcY = pageY(src),
    targetY = pageY(target),
    scrollY = target.scrollTop || 0;     // 没有滚动 scrollY = 0
  return srcY - targetY - scrollY;
};

const defaultOptions = {
  wrapped: null,
  child: null
};
const removeBorder = (wrapped, y) => {
  let bt = getStyle(wrapped, "border-top");
  return y - toNumber(bt);
};

const scrollShow = (options) => {
  options = Object.assign(defaultOptions, options);
  let wrapped = options.wrapped,
    child = options.child;
  let y = clientY(wrapped, child),
    childHeight = getHeightWithMargin(child);
  y = removeBorder(wrapped, y);
  return [y, childHeight];
};

module.exports = scrollShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNob3cuY2pzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdG9vbHMvaW5kZXguanMiLCIuLi9zcmMvY29yZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog6I635Y+WIGRvbSDlsZ7mgKdcclxuICovXHJcbmNvbnN0IGdldFN0eWxlID0gKGVsZSwgYXR0cikgPT4ge1xyXG4gIHJldHVybiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZSlbYXR0cl07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlrZfnrKbkuLLovazmlbDlrZdcclxuICovXHJcbmNvbnN0IHRvTnVtYmVyID0gKHN0cikgPT4ge1xyXG4gIHJldHVybiBOdW1iZXIucGFyc2VJbnQoc3RyKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPliDpq5jluqZcclxuICovXHJcbmNvbnN0IGdldEhlaWdodCA9IChlbGUpID0+IHtcclxuICBsZXQgaGVpZ2h0ID0gZ2V0U3R5bGUoZWxlLFwiaGVpZ2h0XCIpO1xyXG4gIHJldHVybiB0b051bWJlcihoZWlnaHQpO1xyXG59XHJcblxyXG4vKipcclxuICog6I635Y+WIOmrmOW6piArIOWGhei+uei3nVxyXG4gKi9cclxuY29uc3QgZ2V0SGVpZ2h0V2l0aFBhZGRpbmcgPSAoZWxlKSA9PiB7XHJcbiAgcmV0dXJuIGVsZS5jbGllbnRIZWlnaHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDojrflj5Yg6auY5bqmICsg5YaF6L656LedICsg6L655qGGXHJcbiAqL1xyXG5jb25zdCBnZXRIZWlnaHRXaXRoQm9yZGVyID0gKGVsZSkgPT4ge1xyXG4gIHJldHVybiBlbGUub2Zmc2V0SGVpZ2h0O1xyXG59XHJcblxyXG4vKipcclxuICog6I635Y+WIOmrmOW6piArIOWGhei+uei3nSArIOi+ueahhiArIOWklui+uei3nVxyXG4gKi9cclxuY29uc3QgZ2V0SGVpZ2h0V2l0aE1hcmdpbiA9IChlbGUpID0+IHtcclxuICBsZXQgaGVpZ2h0ID0gZ2V0SGVpZ2h0V2l0aEJvcmRlcihlbGUpLFxyXG4gICAgbXQgPSBnZXRTdHlsZShlbGUsIFwibWFyZ2luLXRvcFwiKSxcclxuICAgIG1iID0gZ2V0U3R5bGUoZWxlLCBcIm1hcmdpbi1ib3R0b21cIik7XHJcbiAgcmV0dXJuIGhlaWdodCArIHRvTnVtYmVyKG10KSArIHRvTnVtYmVyKG1iKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPluWuveW6plxyXG4gKi9cclxuY29uc3QgZ2V0V2lkdGggPSAoZWxlKSA9PiB7XHJcbiAgbGV0IHdpZHRoID0gZ2V0U3R5bGUoZWxlLCBcIndpZHRoXCIpO1xyXG4gIHJldHVybiB0b051bWJlcih3aWR0aCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDojrflj5blrr3luqYgKyDlhoXovrnot51cclxuICovXHJcbmNvbnN0IGdldFdpZHRoV2l0aFBhZGRpbmcgPSAoZWxlKSA9PiB7XHJcbiAgcmV0dXJuIGVsZS5jbGllbnRXaWR0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPliDlrr3luqYgKyDlhoXovrnot50gKyDovrnmoYZcclxuICovXHJcbmNvbnN0IGdldFdpZHRoV2l0aEJvcmRlciA9IChlbGUpID0+IHtcclxuICByZXR1cm4gZWxlLm9mZnNldFdpZHRoO1xyXG59XHJcblxyXG4vKipcclxuICog6I635Y+WIOWuveW6piArIOWGhei+uei3nSArIOi+ueahhiArIOWklui+uei3nVxyXG4gKi9cclxuY29uc3QgZ2V0V2lkdGhXaXRoTWFyZ2luID0gKGVsZSkgPT4ge1xyXG4gIGxldCB3aWR0aCA9IGdldFdpZHRoV2l0aEJvcmRlcihlbGUpLFxyXG4gICAgbWwgPSBnZXRTdHlsZShlbGUsIFwibWFyZ2luLWxlZnRcIiksXHJcbiAgICBtciA9IGdldFN0eWxlKGVsZSxcIm1hcmdpbi1yaWdodFwiKTtcclxuICByZXR1cm4gd2lkdGggKyB0b051bWJlcihtbCkgKyB0b051bWJlcihtcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDojrflj5blhYPntKDnmoQgcGFnZVlcclxuICovXHJcbmNvbnN0IHBhZ2VZID0gKGVsZSkgPT4ge1xyXG4gIGxldCB5ID0gMDtcclxuICB3aGlsZShlbGUub2Zmc2V0UGFyZW50KSB7XHJcbiAgICB5ICs9IGVsZS5vZmZzZXRUb3A7XHJcbiAgICBlbGUgPSBlbGUub2Zmc2V0UGFyZW50O1xyXG4gIH1cclxuICByZXR1cm4geTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPluWFg+e0oOeahCBwYWdlWFxyXG4gKi9cclxuY29uc3QgcGFnZVggPSAoZWxlKSA9PiB7XHJcbiAgbGV0IHggPSAwO1xyXG4gIHdoaWxlKGVsZS5vZmZzZXRQYXJlbnQpIHtcclxuICAgIHggKz0gZWxlLm9mZnNldExlZnQ7XHJcbiAgICBlbGUgPSBlbGUub2Zmc2V0UGFyZW50O1xyXG4gIH1cclxuICByZXR1cm4geDtcclxufVxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIOiOt+WPliBzcmMg5ZyoIHRhcmdldCDlhYPntKDph4znmoQgY2xpZW50WFxyXG4gKiBAcGFyYW0gdGFyZ2V0IOebuOWvueeahOWdkOagh+ezu+e7n1xyXG4gKiBAcGFyYW0gc3JjXHJcbiAqL1xyXG5jb25zdCBjbGllbnRYID0gKHRhcmdldCwgc3JjKSA9PiB7XHJcbiAgbGV0IHNyY1ggPSBwYWdlWChzcmMpLFxyXG4gICAgdGFyZ2V0WCA9IHBhZ2VYKHRhcmdldCksXHJcbiAgICBzY3JvbGxYID0gdGFyZ2V0Lm9mZnNldExlZnQgfHwgMDsgLy8g5rKh5pyJ5rua5YqoIHNjcm9sbFggPSAwXHJcbiAgcmV0dXJuIHNyY1ggLSB0YXJnZXRYIC0gc2Nyb2xsWDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPliBzcmMg5ZyoIHRhcmdldCDlhYPntKDph4znmoQgY2xpZW50WVxyXG4gKiBAcGFyYW0gdGFyZ2V0XHJcbiAqIEBwYXJhbSBzcmNcclxuICovXHJcbmNvbnN0IGNsaWVudFkgPSAodGFyZ2V0LCBzcmMpID0+IHtcclxuICBsZXQgc3JjWSA9IHBhZ2VZKHNyYyksXHJcbiAgICB0YXJnZXRZID0gcGFnZVkodGFyZ2V0KSxcclxuICAgIHNjcm9sbFkgPSB0YXJnZXQuc2Nyb2xsVG9wIHx8IDA7ICAgICAvLyDmsqHmnInmu5rliqggc2Nyb2xsWSA9IDBcclxuICByZXR1cm4gc3JjWSAtIHRhcmdldFkgLSBzY3JvbGxZO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIGNsaWVudFgsXHJcbiAgY2xpZW50WSxcclxuICBnZXRIZWlnaHQsXHJcbiAgZ2V0SGVpZ2h0V2l0aFBhZGRpbmcsXHJcbiAgZ2V0SGVpZ2h0V2l0aEJvcmRlcixcclxuICBnZXRIZWlnaHRXaXRoTWFyZ2luLFxyXG4gIGdldFdpZHRoLFxyXG4gIGdldFdpZHRoV2l0aFBhZGRpbmcsXHJcbiAgZ2V0V2lkdGhXaXRoQm9yZGVyLFxyXG4gIGdldFdpZHRoV2l0aE1hcmdpbixcclxuICBwYWdlWCxcclxuICBwYWdlWSxcclxuICBnZXRTdHlsZSxcclxuICB0b051bWJlclxyXG59XHJcbiIsImltcG9ydCB7Y2xpZW50WSwgZ2V0SGVpZ2h0V2l0aE1hcmdpbiwgZ2V0U3R5bGUsIHBhZ2VZLCB0b051bWJlcn0gZnJvbSBcIi4uL3Rvb2xzL2luZGV4XCI7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICB3cmFwcGVkOiBudWxsLFxuICBjaGlsZDogbnVsbFxufVxuY29uc3QgcmVtb3ZlQm9yZGVyID0gKHdyYXBwZWQsIHkpID0+IHtcbiAgbGV0IGJ0ID0gZ2V0U3R5bGUod3JhcHBlZCwgXCJib3JkZXItdG9wXCIpO1xuICByZXR1cm4geSAtIHRvTnVtYmVyKGJ0KTtcbn1cblxuY29uc3Qgc2Nyb2xsU2hvdyA9IChvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgbGV0IHdyYXBwZWQgPSBvcHRpb25zLndyYXBwZWQsXG4gICAgY2hpbGQgPSBvcHRpb25zLmNoaWxkO1xuICBsZXQgeSA9IGNsaWVudFkod3JhcHBlZCwgY2hpbGQpLFxuICAgIGNoaWxkSGVpZ2h0ID0gZ2V0SGVpZ2h0V2l0aE1hcmdpbihjaGlsZCk7XG4gIHkgPSByZW1vdmVCb3JkZXIod3JhcHBlZCwgeSk7XG4gIHJldHVybiBbeSwgY2hpbGRIZWlnaHRdO1xufVxuZXhwb3J0IGRlZmF1bHQgc2Nyb2xsU2hvdztcblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxLQUFLO0FBQ2hDLEVBQUUsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFELEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxLQUFLO0FBQzFCLEVBQUUsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLEVBQUM7QUFnQkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLG1CQUFtQixHQUFHLENBQUMsR0FBRyxLQUFLO0FBQ3JDLEVBQUUsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBQzFCLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFHLEtBQUs7QUFDckMsRUFBRSxJQUFJLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUM7QUFDdkMsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUM7QUFDcEMsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUN4QyxFQUFFLE9BQU8sTUFBTSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUMsRUFBQztBQWlDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxLQUFLO0FBQ3ZCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1osRUFBRSxNQUFNLEdBQUcsQ0FBQyxZQUFZLEVBQUU7QUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUN2QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsRUFBQztBQTBCRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUs7QUFDakMsRUFBRSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ3ZCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDM0IsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7QUFDcEMsRUFBRSxPQUFPLElBQUksR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ2xDOztBQzNIQSxNQUFNLGNBQWMsR0FBRztBQUN2QixFQUFFLE9BQU8sRUFBRSxJQUFJO0FBQ2YsRUFBRSxLQUFLLEVBQUUsSUFBSTtBQUNiLEVBQUM7QUFDRCxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUs7QUFDckMsRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzNDLEVBQUUsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLEVBQUM7QUFDRDtBQUNLLE1BQUMsVUFBVSxHQUFHLENBQUMsT0FBTyxLQUFLO0FBQ2hDLEVBQUUsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25ELEVBQUUsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87QUFDL0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUMxQixFQUFFLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO0FBQ2pDLElBQUksV0FBVyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFCOzs7OyJ9
